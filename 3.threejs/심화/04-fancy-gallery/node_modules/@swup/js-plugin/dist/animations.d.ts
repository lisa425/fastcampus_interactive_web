import type { Path, Visit } from 'swup';
import { MatchFunction, MatchOptions } from './index.js';
/**
 * Animation object as supplied by plugin users.
 * Contains path patterns and handler functions for in/out animation.
 */
export type Animation = {
    /** The path pattern to match the current url against. */
    from: Path;
    /** The path pattern to match the next url against. */
    to: Path;
    /** The function to call when the animation is triggered. */
    out: (done: () => void, data: AnimationData) => void | Promise<void>;
    /** The function to call when the animation is triggered. */
    in: (done: () => void, data: AnimationData) => void | Promise<void>;
};
/**
 * Compiled animation object with pre-optimized match functions.
 */
export type CompiledAnimation = Animation & {
    /** Match function to check if the `from` pattern matches a given URL */
    matchesFrom: MatchFunction;
    /** Match function to check if the `to` pattern matches a given URL */
    matchesTo: MatchFunction;
};
/**
 * Data object passed into the animation handler functions.
 */
export type AnimationData = {
    visit: Visit;
    direction: 'in' | 'out';
    from: {
        url: string;
        pattern: Path;
        params: object;
    };
    to: {
        url: string;
        pattern: Path;
        params: object;
    };
};
/**
 * The animation object to use when no other animation matches.
 */
export declare const defaultAnimation: Animation;
/**
 * Compile animations to match functions and transitions
 */
export declare function compileAnimations(animations: Animation[], matchOptions?: MatchOptions): CompiledAnimation[];
/**
 * Compile path patterns to match functions and transitions
 */
export declare function compileAnimation(animation: Animation, matchOptions?: MatchOptions): CompiledAnimation;
/**
 * Rate animation based on the match
 */
export declare function rateAnimation(animation: CompiledAnimation, from: string, to: string, name?: string): number;
/**
 * Find the best matching animation given a visit object
 */
export declare function findAnimationForVisit(animations: CompiledAnimation[], visit: Visit): CompiledAnimation | null;
/**
 * Find the best matching animation by ranking them against each other
 */
export declare function findAnimation(animations: CompiledAnimation[], from: string, to: string, name?: string): CompiledAnimation | null;
/**
 * Create an object with all the data passed into the animation handler function
 */
export declare function assembleAnimationData(animation: CompiledAnimation, visit: Visit, direction: 'in' | 'out'): AnimationData;
/**
 * Run an animation handler function and resolve when it's done.
 */
export declare function runAnimation(animation: CompiledAnimation, data: AnimationData): Promise<void>;
