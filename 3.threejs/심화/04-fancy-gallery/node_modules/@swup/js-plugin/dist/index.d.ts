import Plugin from '@swup/plugin';
import { matchPath } from 'swup';
import type { Handler, Visit } from 'swup';
import type { Animation, CompiledAnimation } from './animations.js';
type RequireKeys<T, K extends keyof T> = Partial<T> & Pick<T, K>;
type Options = {
    /** The selector for matching the main content area of the page. */
    animations: Animation[];
    /** Options for matching paths. Directly passed into `path-to-regexp`. */
    matchOptions: MatchOptions;
};
type InitOptions = RequireKeys<Options, 'animations'>;
export type MatchOptions = Parameters<typeof matchPath>[1];
export type MatchFunction = ReturnType<typeof matchPath>;
export default class SwupJsPlugin extends Plugin {
    name: string;
    requires: {
        swup: string;
    };
    defaults: Options;
    options: Options;
    animations: CompiledAnimation[];
    constructor(options: InitOptions);
    mount(): void;
    /**
     * Replace swup's internal out-animation handler.
     * Finds and runs the 'in' animation for the current visit.
     */
    awaitOutAnimation: Handler<'animation:out:await'>;
    /**
     * Replace swup's internal in-animation handler handler.
     * Finds and runs the 'in' animation for the current visit.
     */
    awaitInAnimation: Handler<'animation:in:await'>;
    /**
     * Find the best matching animation for the visit and run its handler function.
     */
    findAndRunAnimation(visit: Visit, direction: 'in' | 'out'): Promise<void>;
}
export {};
